{"version":3,"sources":["userlocation.svg","messagelocation.svg","components/ChatMap.js","components/MessageCard.js","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","Map","className","center","position","zoom","TileLayer","attribution","url","userLocation","Marker","icon","userIcon","messages","map","message","key","_id","messageIcon","latitude","longitude","Popup","name","Card","body","CardTitle","CardText","sentMessage","Form","onSubmit","formSubmit","FormGroup","row","Label","for","sm","Col","Input","onChange","valueChanged","type","id","placeholder","Button","disabled","API_URL","window","location","hostname","L","iconUrl","iconSize","iconAnchor","messageLocation","popupAnchor","App","validateForm","console","log","state","lat","lng","userMessage","error","response","length","event","preventDefault","setState","fetch","method","headers","JSON","stringify","sendMessage","then","showToast","setTimeout","catch","err","target","value","prevState","Accept","res","json","Promise","resolve","navigator","geolocation","getCurrentPosition","coords","maximumAge","timeout","enableHighAccuracy","this","ChatMap","Toast","ToastBody","MessageCard","Component","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec37c24f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/userlocation.550199a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/messagelocation.a7dfc8ba.svg\";","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nexport default (props) => {\n  return (\n    <Map className=\"map\" center={props.position} zoom={props.zoom}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {props.userLocation ? (\n        <Marker icon={props.userIcon} position={props.position}></Marker>\n      ) : (\n        \"\"\n      )}\n      {props.messages.map((message) => (\n        <Marker\n          key={message._id}\n          icon={props.messageIcon}\n          position={[message.latitude, message.longitude]}\n        >\n          <Popup>\n            <strong>{message.name}:</strong>\n            {message.message}\n          </Popup>\n        </Marker>\n      ))}\n    </Map>\n  );\n};\n","import React from \"react\";\nimport {\n  Card,\n  Button,\n  CardTitle,\n  CardText,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n} from \"reactstrap\";\n\nexport default (props) => {\n  return (\n    <Card className=\"message-form\" body>\n      <div className=\"message-header\">\n        <CardTitle>\n          <strong>Welcome to Map Chat!!</strong>\n        </CardTitle>\n        <CardText>Leave a message with your location</CardText>\n      </div>\n      <div className=\"message-body\">\n        {!props.sentMessage ? (\n          <Form onSubmit={props.formSubmit}>\n            <FormGroup row>\n              <Label for=\"name\" sm={4}>\n                Name\n              </Label>\n              <Col sm={10}>\n                <Input\n                  onChange={props.valueChanged}\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup row>\n              <Label for=\"message\" sm={4}>\n                Message\n              </Label>\n              <Col sm={10}>\n                <Input\n                  onChange={props.valueChanged}\n                  type=\"textarea\"\n                  name=\"message\"\n                  id=\"message\"\n                  placeholder=\"Enter a message\"\n                />\n              </Col>\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              disabled={!props.userLocation}\n              className=\"submit-bt\"\n            >\n              Send\n            </Button>\n          </Form>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </Card>\n  );\n};\n","var API_URL =\n  window.location.hostname === \"localhost\"\n    ? \"http://localhost:8000/messages\"\n    : \"https://mapchatnearby.herokuapp.com/messages\";\nexport function getMessages() {\n  return fetch(API_URL, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  });\n}\nexport function sendMessage(message) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n    body: JSON.stringify(message),\n  });\n}\nexport function getLocation() {\n  return new Promise((resolve) => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        resolve({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          zoom: 12,\n          userLocation: true,\n        });\n      },\n      (err) => {\n        console.log(\"Location Blocked by user\");\n      },\n      { maximumAge: 10000, timeout: 5000, enableHighAccuracy: true }\n    );\n  });\n}\n","import React, { Component } from \"react\";\n\nimport { Toast, ToastBody } from \"reactstrap\";\n// import { userIcon, messageIcon } from \"./assets/marker\";\nimport userLocation from \"./userlocation.svg\";\nimport messageLocation from \"./messagelocation.svg\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport ChatMap from \"./components/ChatMap\";\nimport MessageCard from \"./components/MessageCard\";\nimport { getMessages, sendMessage, getLocation } from \"./api\";\n\nimport \"./App.css\";\nlet userIcon = L.icon({\n  iconUrl: userLocation,\n  iconSize: [40, 40],\n  iconAnchor: [20, 40],\n});\nlet messageIcon = L.icon({\n  iconUrl: messageLocation,\n  iconSize: [40, 40],\n  iconAnchor: [20, 40],\n  popupAnchor: [0, -40],\n});\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      location: {\n        lat: 22,\n        lng: 80,\n      },\n\n      zoom: 5,\n      userLocation: false,\n      userMessage: {\n        name: \"\",\n        message: \"\",\n      },\n      sentMessage: false,\n      showToast: false,\n      messages: [],\n    };\n  }\n  validateForm = () => {\n    console.log(\"Validating form\");\n    const { lat, lng } = this.state.location,\n      { name, message } = this.state.userMessage;\n    if (lat < -90 || lat > 90)\n      return {\n        error: \"Latitude should be in a range of -90 to 90\",\n        response: false,\n      };\n    if (lng < -180 || lng > 180)\n      return {\n        error: \"Longitude should be in a range of -180 to 180\",\n        response: false,\n      };\n    if (name.length < 5 || name.length > 50)\n      return {\n        error: \"Name should be 5 to 50 characters long\",\n        response: false,\n      };\n    if (message.length < 5 || message.length > 200)\n      return {\n        error: \"Message should be 5 to 200 characters long\",\n        response: false,\n      };\n\n    return {\n      error: \"\",\n      response: true,\n    };\n  };\n  formSubmit = (event) => {\n    event.preventDefault();\n    this.setState({\n      sentMessage: false,\n    });\n\n    const { error, response } = this.validateForm();\n    if (response) {\n      // make an API call\n      const message = {\n        name: this.state.userMessage.name,\n        message: this.state.userMessage.message,\n        latitude: this.state.location.lat,\n        longitude: this.state.location.lng,\n      };\n      sendMessage(message)\n        .then(() => {\n          this.setState({\n            sentMessage: true,\n            showToast: true,\n          });\n          setTimeout(() => {\n            this.setState({\n              showToast: false,\n            });\n          }, 3000);\n        })\n        .catch((err) => {\n          console.log(\"POST error\", err);\n        });\n    } else {\n      console.log(error);\n    }\n  };\n  valueChanged = (event) => {\n    this.validateForm();\n    const { name, value } = event.target;\n    this.setState((prevState) => ({\n      userMessage: {\n        ...prevState.userMessage,\n        [name]: value,\n      },\n    }));\n  };\n  componentDidMount() {\n    // Get messages from database\n    getMessages()\n      .then((res) => res.json())\n      .then((messages) => {\n        this.setState({\n          messages: messages,\n        });\n      })\n      .catch((err) => {\n        console.log(\"Fetch get error \", err);\n      });\n\n    // get Users location\n    getLocation().then((location) => {\n      this.setState({\n        location,\n        zoom: 12,\n        userLocation: true,\n      });\n    });\n  }\n\n  render() {\n    const position = [this.state.location.lat, this.state.location.lng];\n    return (\n      <div className=\"map\">\n        <ChatMap\n          zoom={this.state.zoom}\n          userLocation={this.state.userLocation}\n          messages={this.state.messages}\n          position={position}\n          userIcon={userIcon}\n          messageIcon={messageIcon}\n        />\n        {!this.state.sentMessage ? (\n          <MessageCard\n            sentMessage={this.state.sentMessage}\n            formSubmit={this.formSubmit}\n            valueChanged={this.valueChanged}\n            userLocation={this.state.userLocation}\n          />\n        ) : this.state.showToast ? (\n          <div className=\"toast-div p-3 my-2 rounded\">\n            <Toast>\n              <ToastBody>Message sent !!</ToastBody>\n            </Toast>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}